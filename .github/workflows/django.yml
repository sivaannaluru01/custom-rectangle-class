const EventEmitter = require('events');
const { Worker, isMainThread, parentPort } = require('worker_threads');

// Define the event emitter
class UserEmitter extends EventEmitter {}
const userEmitter = new UserEmitter();

let inTransaction = false;

// Signal handler to demonstrate behavior
userEmitter.on('userSaved', (user) => {
    console.log(`Signal handler started for user ${user.username}`);
    console.log(`Signal handler thread ID: ${process.pid}`);
    
    if (inTransaction) {
        console.log("Signal handler is in the same transaction.");
    } else {
        console.log("Signal handler is not in the same transaction.");
    }
    
    // Simulate long-running task
    setTimeout(() => {
        console.log("Signal handler finished.");
    }, 3000);
    
    // Simulate threading behavior
    if (isMainThread) {
        const worker = new Worker(__filename);
        worker.postMessage('start');
    }
});

// Main function to test synchronous vs. asynchronous execution and threading
function testEventHandling() {
    console.log(`Main thread ID: ${process.pid}`);
    
    inTransaction = true;
    console.log("Creating user inside transaction...");
    userEmitter.emit('userSaved', { username: 'test_user' });
    
    // Simulate transaction rollback
    console.log("Simulating transaction rollback.");
    inTransaction = false;
}

if (isMainThread) {
    testEventHandling();
} else {
    parentPort.on('message', (msg) => {
        if (msg === 'start') {
            console.log(`Worker thread ID: ${process.pid}`);
        }
    });
}
